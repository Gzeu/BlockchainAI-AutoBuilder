name: 🚀 Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v0.1.0'

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Create GitHub Release
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}
      version: ${{ steps.extract-version.outputs.version }}
    
    steps:
      - name: 📋 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Extract Version
        id: extract-version
        run: |
          if [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            VERSION=${{ github.event.inputs.version }}
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: 📝 Generate Changelog
        id: changelog
        run: |
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "First release - getting all commits"
            COMMITS=$(git log --pretty=format:'- %s (%h)' --reverse)
          else
            echo "Previous tag: $PREVIOUS_TAG"
            COMMITS=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:'- %s (%h)' --reverse)
          fi
          
          # Create changelog
          cat > CHANGELOG.md << EOF
          # 🚀 What's Changed in ${{ steps.extract-version.outputs.version }}
          
          ## 📋 Changes
          $COMMITS
          
          ## 🏗️ Architecture
          - **Frontend**: Next.js 15 + TypeScript + Tailwind CSS
          - **Backend**: Express.js + Prisma + PostgreSQL
          - **Blockchain**: MultiversX SDK + Smart Contracts
          - **AI**: OpenAI GPT-4 integration
          - **DevOps**: GitHub Actions CI/CD
          
          ## 🚀 Deployment
          - Frontend deployed on Vercel
          - Backend deployed on Railway
          - Database on Supabase
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${{ steps.extract-version.outputs.version }}
          EOF
          
          echo "changelog-file=CHANGELOG.md" >> $GITHUB_OUTPUT

      - name: 🚀 Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract-version.outputs.version }}
          release_name: 'BlockchainAI AutoBuilder ${{ steps.extract-version.outputs.version }}'
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(steps.extract-version.outputs.version, 'alpha') || contains(steps.extract-version.outputs.version, 'beta') || contains(steps.extract-version.outputs.version, 'rc') }}

  # Build and Upload Artifacts
  build-artifacts:
    name: 📦 Build Artifacts
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
      - name: 📋 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build Applications
        run: |
          pnpm build
          
          # Create distribution archives
          mkdir -p dist
          
          # Frontend build
          cd apps/web
          tar -czf ../../dist/frontend-${{ needs.create-release.outputs.version }}.tar.gz .next
          cd ../..
          
          # Backend build  
          cd apps/api
          tar -czf ../../dist/backend-${{ needs.create-release.outputs.version }}.tar.gz dist
          cd ../..
          
          # Smart contracts
          cd apps/smart-contracts
          if [ -d "output" ]; then
            tar -czf ../../dist/contracts-${{ needs.create-release.outputs.version }}.tar.gz output
          fi
          cd ../..

      - name: 📋 Generate Build Info
        run: |
          cat > dist/build-info.json << EOF
          {
            "version": "${{ needs.create-release.outputs.version }}",
            "buildDate": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "nodejs": "${{ env.NODE_VERSION }}",
            "artifacts": {
              "frontend": "frontend-${{ needs.create-release.outputs.version }}.tar.gz",
              "backend": "backend-${{ needs.create-release.outputs.version }}.tar.gz",
              "contracts": "contracts-${{ needs.create-release.outputs.version }}.tar.gz"
            }
          }
          EOF

      - name: 📤 Upload Frontend Artifact
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: ./dist/frontend-${{ needs.create-release.outputs.version }}.tar.gz
          asset_name: frontend-${{ needs.create-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: 📤 Upload Backend Artifact
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: ./dist/backend-${{ needs.create-release.outputs.version }}.tar.gz
          asset_name: backend-${{ needs.create-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: 📤 Upload Build Info
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: ./dist/build-info.json
          asset_name: build-info.json
          asset_content_type: application/json

  # Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-artifacts]
    environment: production
    
    steps:
      - name: 📋 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🚀 Deploy Frontend to Vercel
        uses: amondnet/vercel-action@v25
        if: env.VERCEL_TOKEN != ''
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/web
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy Backend to Railway
        if: env.RAILWAY_TOKEN != ''
        uses: bervProject/railway-deploy@v1.0.0
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: 'api-production'
          detach: false
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  # Notify Success
  notify-success:
    name: 📢 Notify Success
    runs-on: ubuntu-latest
    needs: [create-release, build-artifacts, deploy-production]
    if: always() && needs.create-release.result == 'success'
    
    steps:
      - name: 📢 Notify Slack
        if: env.SLACK_WEBHOOK != ''
        uses: 8398a7/action-slack@v3
        with:
          status: 'success'
          channel: '#releases'
          text: |
            🚀 *Release ${{ needs.create-release.outputs.version }} deployed successfully!*
            
            📋 *Changes*: 
            View release notes: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}
            
            🌐 *Production URLs*:
            • Frontend: https://blockchainai-autobuilder.vercel.app
            • API: https://api.blockchainai-autobuilder.com
            
            👨‍💻 *Author*: ${{ github.actor }}
            📅 *Build time*: ${{ github.run_number }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: 📧 Send Email Notification
        if: always()
        run: |
          echo "Release ${{ needs.create-release.outputs.version }} completed!"
          echo "Status: ${{ job.status }}"
          echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}"